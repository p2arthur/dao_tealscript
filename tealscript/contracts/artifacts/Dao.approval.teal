#pragma version 9

// This TEAL was generated by TEALScript v0.63.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// createApplication(string)void
//
// // define a proposal on creating an application
abi_route_createApplication:
	// proposal: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createApplication(string)void
	callsub createApplication
	int 1
	return

createApplication:
	proto 1 0

	// contracts/dao.algo.ts:13
	// this.proposal.value = proposal
	byte 0x70726f706f73616c // "proposal"
	frame_dig -1 // proposal: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// bootstrap()uint64
//
// //Mint DAO tokens to prevent a Sybil Attack - Prevent users to sell their DAO token after minting it
abi_route_bootstrap:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute bootstrap()uint64
	callsub bootstrap
	int 1
	return

bootstrap:
	proto 1 0

	// contracts/dao.algo.ts:19
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contracts/dao.algo.ts:22
	// assert(!this.registeredAsaId.exists)
	txna Applications 0
	byte 0x726567697374657265644173614964 // "registeredAsaId"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/dao.algo.ts:25
	// registeredAsa = sendAssetCreation({ configAssetTotal: 1_000, configAssetFreeze: this.app.address })
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// contracts/dao.algo.ts:25
	// configAssetTotal: 1_000
	int 1_000
	itxn_field ConfigAssetTotal

	// contracts/dao.algo.ts:25
	// configAssetFreeze: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetFreeze

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury -1 // registeredAsa: asset

	// contracts/dao.algo.ts:27
	// this.registeredAsaId.value = registeredAsa
	byte 0x726567697374657265644173614964 // "registeredAsaId"
	frame_dig -1 // registeredAsa: asset
	app_global_put

	// contracts/dao.algo.ts:28
	// return registeredAsa;
	frame_dig -1 // registeredAsa: asset
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// register(asset)void
//
// // register method gives the person the ASA and freezes it - We need to pass the registeredAssa to the params but we shouldn't use it, instead we should use the asset on the global state
abi_route_register:
	// registeredAsa: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute register(asset)void
	callsub register
	int 1
	return

register:
	proto 1 0

	// contracts/dao.algo.ts:34
	// assert(this.txn.sender.assetBalance(this.registeredAsaId.value) === 0)
	txn Sender
	byte 0x726567697374657265644173614964 // "registeredAsaId"
	app_global_get
	asset_holding_get AssetBalance
	assert
	int 0
	==
	assert

	// contracts/dao.algo.ts:37
	// sendAssetTransfer({ xferAsset: this.registeredAsaId.value, assetReceiver: this.txn.sender, assetAmount: 1 })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/dao.algo.ts:37
	// xferAsset: this.registeredAsaId.value
	byte 0x726567697374657265644173614964 // "registeredAsaId"
	app_global_get
	itxn_field XferAsset

	// contracts/dao.algo.ts:37
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/dao.algo.ts:37
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/dao.algo.ts:40
	// sendAssetFreeze({
	//       freezeAsset: this.registeredAsaId.value,
	//       freezeAssetAccount: this.txn.sender,
	//       freezeAssetFrozen: true,
	//     })
	itxn_begin
	int afrz
	itxn_field TypeEnum

	// contracts/dao.algo.ts:41
	// freezeAsset: this.registeredAsaId.value
	byte 0x726567697374657265644173614964 // "registeredAsaId"
	app_global_get
	itxn_field FreezeAsset

	// contracts/dao.algo.ts:42
	// freezeAssetAccount: this.txn.sender
	txn Sender
	itxn_field FreezeAssetAccount

	// contracts/dao.algo.ts:43
	// freezeAssetFrozen: true
	int 1
	itxn_field FreezeAssetFrozen

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// vote(asset,bool)void
//
// //Enable caller to vote in favour or against a proposal
abi_route_vote:
	// registeredASA: asset
	txna ApplicationArgs 2
	btoi
	txnas Assets

	// inFavor: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// execute vote(asset,bool)void
	callsub vote
	int 1
	return

vote:
	proto 2 0

	// contracts/dao.algo.ts:49
	// assert(this.txn.sender.assetBalance(this.registeredAsaId.value) === 1)
	txn Sender
	byte 0x726567697374657265644173614964 // "registeredAsaId"
	app_global_get
	asset_holding_get AssetBalance
	assert
	int 1
	==
	assert

	// contracts/dao.algo.ts:50
	// this.votesTotal.value = this.votesTotal.value + 1
	byte 0x766f746573546f74616c // "votesTotal"
	byte 0x766f746573546f74616c // "votesTotal"
	app_global_get
	int 1
	+
	app_global_put

	// if0_condition
	// contracts/dao.algo.ts:51
	// inFavor
	frame_dig -1 // inFavor: bool
	bz if0_end

	// if0_consequent
	// contracts/dao.algo.ts:52
	// this.votesInFavorTotal.value = this.votesInFavorTotal.value + 1
	byte 0x766f746573496e4661766f72546f74616c // "votesInFavorTotal"
	byte 0x766f746573496e4661766f72546f74616c // "votesInFavorTotal"
	app_global_get
	int 1
	+
	app_global_put

if0_end:
	retsub

// getProposal()string
//
// // get all votes of the proposal - And votes in favor
abi_route_getProposal:
	// execute getProposal()string
	callsub getProposal
	int 1
	return

getProposal:
	proto 0 0

	// contracts/dao.algo.ts:58
	// return this.proposal.value;
	byte 0x70726f706f73616c // "proposal"
	app_global_get
	extract 2 0
	dup
	len
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getRegisteredAsa()uint64
abi_route_getRegisteredAsa:
	// execute getRegisteredAsa()uint64
	callsub getRegisteredAsa
	int 1
	return

getRegisteredAsa:
	proto 0 0

	// contracts/dao.algo.ts:62
	// return this.registeredAsaId.value;
	byte 0x726567697374657265644173614964 // "registeredAsaId"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getVotes()(uint64,uint64)
abi_route_getVotes:
	// execute getVotes()(uint64,uint64)
	callsub getVotes
	int 1
	return

getVotes:
	proto 0 0

	// contracts/dao.algo.ts:66
	// return [this.votesTotal.value, this.votesInFavorTotal.value];
	byte 0x766f746573546f74616c // "votesTotal"
	app_global_get
	itob
	byte 0x766f746573496e4661766f72546f74616c // "votesInFavorTotal"
	app_global_get
	itob
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

create_NoOp:
	method "createApplication(string)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "bootstrap()uint64"
	method "register(asset)void"
	method "vote(bool,asset)void"
	method "getProposal()string"
	method "getRegisteredAsa()uint64"
	method "getVotes()(uint64,uint64)"
	txna ApplicationArgs 0
	match abi_route_bootstrap abi_route_register abi_route_vote abi_route_getProposal abi_route_getRegisteredAsa abi_route_getVotes
	err